basePath: /api
consumes:
- application/json
course_enrollment_body:
  in: body
  name: body
  required: true
  schema:
    items:
      $ref: '#/models/CourseEnrollmentRequest'
    type: array
course_input_status:
  enum:
  - active
  - inactive
  type: string
course_output_status:
  enum:
  - active
  - inactive
  - invalid-status
  - duplicated
  - conflict
  - not-in-program
  - not-found
  - illegal-operation
  - internal-error
  type: string
course_path_param:
  description: edX course run identifier
  example: course-v1:ExU+Science-101+Fall2050
  in: path
  name: course_id
  required: true
  type: string
endpoints:
  get_course_enrollments:
    description: Submit a job to retrieve course enrollment data
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    - description: edX course run identifier
      example: course-v1:ExU+Science-101+Fall2050
      in: path
      name: course_id
      required: true
      type: string
    - description: format of file to generate
      enum:
      - json
      - csv
      example: json
      in: query
      name: fmt
      required: false
      type: string
    responses:
      200:
        description: OK
        schema:
          $ref: '#/models/NewJob'
      403:
        description: "User is not authorized to retrieve enrollments for program course.\n"
      404:
        description: "Course does not exist within program, or program was not found.\n"
    summary: Request course enrollment data
  get_job_status:
    parameters:
    - description: UUID-4 job identifier
      example: 3869c0d5-e88f-4088-bf1d-409222492869
      format: uuid
      in: path
      name: job_id
      required: true
      type: string
    responses:
      200:
        description: OK
        schema:
          $ref: '#/models/JobStatus'
    summary: Get the status of a job
  get_program:
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    responses:
      200:
        description: OK
        examples:
          application/json:
            program_key: uexample-master-of-science
            program_title: Master of Science
            program_url: https://uexample.edx.org/uexample-master-of-science
        schema:
          $ref: '#/models/Program'
      403:
        description: User is not authorized to view program.
      404:
        description: Program was not found.
    summary: Get Program
  get_program_enrollments:
    description: Submit a job to retrieve program enrollment data
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    - description: format of file to generate
      enum:
      - json
      - csv
      example: json
      in: query
      name: fmt
      required: false
      type: string
    responses:
      200:
        description: OK
        schema:
          $ref: '#/models/NewJob'
      403:
        description: User is not authorized to retrieve enrollment of program.
      404:
        description: Program was not found.
    summary: Request program enrollment data
  list_program_courses:
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    responses:
      200:
        description: OK
        examples:
          application/json:
          - course_id: course-v1:ExU+Science-101+Fall2050,
            course_title: Introduction to Science,
            course_url: https://courses.edx.org/course-v1:ExU+Science-101+Fall2050
        schema:
          items:
            $ref: '#/models/Course'
          type: array
      403:
        description: User is not authorized to list courses of program.
      404:
        description: Program was not found.
    summary: List program courses
  list_programs:
    description: List all programs, requires an organization key for non-admins
    parameters:
    - description: Organization key
      in: query
      name: org
      required: false
      type: string
    responses:
      200:
        description: OK
        examples:
          application/json:
          - program_key: uexample-master-of-science
            program_title: Master of Science
            program_url: https://uexample.edx.org/uexample-master-of-science
        schema:
          items:
            $ref: '#/models/Program'
          type: array
      403:
        description: User is not authorized to list specified programs.
      404:
        description: Organization was not found.
    summary: List programs
  login:
    get:
      responses:
        302:
          description: Found
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/login/edx-oauth2/
  logout:
    get:
      responses:
        302:
          description: Found
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/logout/
  patch_course_enrollments:
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    - description: edX course run identifier
      example: course-v1:ExU+Science-101+Fall2050
      in: path
      name: course_id
      required: true
      type: string
    - in: body
      name: body
      required: true
      schema:
        items:
          $ref: '#/models/CourseEnrollmentRequest'
        type: array
    responses:
      200:
        description: All students' enrollments were successfully modified.
        examples:
          application/json:
            student_0128fe4a: active
            student_aae45c81: inactive
        schema:
          $ref: '#/models/CourseEnrollmentResult'
      207:
        description: "Some, but not all, students' enrollments were successfully modified.\n"
        examples:
          application/json:
            student_0128fe4a: active
            student_aae45c81: not-found
        schema:
          $ref: '#/models/CourseEnrollmentResult'
      403:
        description: "User is not authorized to modify enrollments for program course.\n"
      404:
        description: "Course does not exist within program, or program was not found.\n"
      413:
        description: "Payload too large; at most 25 students' enrollments may be modified\
          \ per request.\n"
      422:
        description: "None of the students' enrollments were successfully modified.\n"
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: not-found
        schema:
          $ref: '#/models/CourseEnrollmentResult'
    summary: Modify course enrollments
  patch_program_enrollments:
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    - in: body
      name: body
      required: true
      schema:
        items:
          $ref: '#/models/ProgramEnrollmentRequest'
        type: array
    responses:
      200:
        description: All students' enrollments were successfully modified.
        examples:
          application/json:
            student_0128fe4a: enrolled
            student_aae45c81: canceled
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
      207:
        description: "Some, but not all, students' enrollments were successfully modified.\n"
        examples:
          application/json:
            student_0128fe4a: enrolled
            student_aae45c81: not-found
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
      403:
        description: "User is not authorized to modify enrollments for program course.\n"
      404:
        description: "Course does not exist within program, or program was not found.\n"
      413:
        description: "Payload too large; at most 25 students' enrollments may be modified\
          \ per request.\n"
      422:
        description: "None of the students' enrollments were successfully modified.\n"
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: not-found
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
    summary: Modify program enrollments
  post_course_enrollments:
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    - description: edX course run identifier
      example: course-v1:ExU+Science-101+Fall2050
      in: path
      name: course_id
      required: true
      type: string
    - in: body
      name: body
      required: true
      schema:
        items:
          $ref: '#/models/CourseEnrollmentRequest'
        type: array
    responses:
      200:
        description: All students were successfully listed.
        examples:
          application/json:
            student_0128fe4a: inactive
            student_aae45c81: active
        schema:
          $ref: '#/models/CourseEnrollmentResult'
      207:
        description: Some, but not all, students were successfully listed.
        examples:
          application/json:
            student_0128fe4a: inactive
            student_aae45c81: conflict
        schema:
          $ref: '#/models/CourseEnrollmentResult'
      403:
        description: "User is not authorized to modify enrollments for program course.\n"
      404:
        description: "Course does not exist within program, or program was not found.\n"
      413:
        description: "Payload too large; at most 25 students may be supplied per request.\n"
      422:
        description: None of the students were successfully listed.
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: conflict
        schema:
          $ref: '#/models/CourseEnrollmentResult'
    summary: Enroll students in a course
  post_program_enrollments:
    parameters:
    - description: edX program key
      example: uexample-master-of-science
      in: path
      name: program_key
      required: true
      type: string
    - in: body
      name: body
      required: true
      schema:
        items:
          $ref: '#/models/ProgramEnrollmentRequest'
        type: array
    responses:
      200:
        description: All students were successfully listed.
        examples:
          application/json:
            student_0128fe4a: pending
            student_aae45c81: enrolled
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
      207:
        description: Some, but not all, students were successfully listed.
        examples:
          application/json:
            student_0128fe4a: pending
            student_aae45c81: conflict
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
      403:
        description: "User is not authorized to modify enrollments for program course.\n"
      404:
        description: "Course does not exist within program, or program was not found.\n"
      413:
        description: "Payload too large; at most 25 students may be supplied per request.\n"
      422:
        description: None of the students were successfully listed.
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: conflict
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
    summary: Enroll students in a program
  static:
    x-amazon-apigateway-any-method:
      parameters:
      - in: path
        name: proxy
      responses:
        200:
          description: OK
      x-amazon-apigateway-integration:
        httpMethod: GET
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/static/{proxy}
  swagger:
    get:
      operationId: registrar_get_api_docs
      responses:
        200:
          description: OK
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api-docs/
format_param:
  description: format of file to generate
  enum:
  - json
  - csv
  example: json
  in: query
  name: fmt
  required: false
  type: string
info:
  description: "Registrar API\n"
  title: Registrar API
models:
  Course:
    properties:
      course_id:
        type: string
      course_title:
        type: string
      course_url:
        format: uri
        type: string
    type: object
  CourseEnrollmentRequest:
    properties:
      status:
        enum:
        - active
        - inactive
        type: string
      student_key:
        description: "Key that uniquely identifies student within organization. For\
          \ data privacy reasons, this cannot be, or include, sensitive personal information\
          \ like a student’s official university ID number, social security number,\
          \ or some other government-issued ID number.\n"
        type: string
    type: object
  CourseEnrollmentResult:
    additionalProperties:
      enum:
      - active
      - inactive
      - invalid-status
      - duplicated
      - conflict
      - not-in-program
      - not-found
      - illegal-operation
      - internal-error
      type: string
    description: Mapping from student_keys to course enrollment statuses
    type: object
  JobStatus:
    properties:
      created:
        description: The ISO-format date-time that the job was created
        format: date-time
        type: string
      result:
        description: URL to result file; null if result unavailable
        format: uri
        nullable: true
        type: string
      state:
        enum:
        - Queued
        - In Progress
        - Canceled
        - Failed
        - Succeeded
        type: string
    type: object
  NewJob:
    properties:
      job_id:
        description: UUID-4 job identifier
        format: uuid
        type: string
      job_url:
        description: URL to get status of job
        format: uri
        type: string
    type: object
  Program:
    properties:
      program_key:
        type: string
      program_title:
        type: string
      program_url:
        format: uri
        type: string
    type: object
  ProgramEnrollmentRequest:
    properties:
      status:
        enum:
        - enrolled
        - pending
        - suspended
        - canceled
        type: string
      student_key:
        description: "Key that uniquely identifies student within organization. For\
          \ data privacy reasons, this cannot be, or include, sensitive personal information\
          \ like a student’s official university ID number, social security number,\
          \ or some other government-issued ID number.\n"
        type: string
    type: object
  ProgramEnrollmentResult:
    additionalProperties:
      enum:
      - enrolled
      - pending
      - suspended
      - canceled
      - invalid-status
      - duplicated
      - conflict
      - not-found
      - illegal-operation
      - internal-error
      type: string
    description: Mapping from student_keys to program enrollment statuses
    type: object
paths:
  /v1-mock/jobs/{job_id}/:
    get:
      operationId: registrar_v1_mock_get_job_status
      parameters:
      - description: UUID-4 job identifier
        example: 3869c0d5-e88f-4088-bf1d-409222492869
        format: uuid
        in: path
        name: job_id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/JobStatus'
      summary: Get the status of a job
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: GET
        requestParameters:
          integration.request.path.job_id: method.request.path.job_id
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/jobs/{job_id}/
  /v1-mock/programs/:
    get:
      description: List all programs, requires an organization key for non-admins
      operationId: registrar_v1_mock_list_programs
      parameters:
      - description: Organization key
        in: query
        name: org
        required: false
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
            - program_key: uexample-master-of-science
              program_title: Master of Science
              program_url: https://uexample.edx.org/uexample-master-of-science
          schema:
            items:
              $ref: '#/models/Program'
            type: array
        403:
          description: User is not authorized to list specified programs.
        404:
          description: Organization was not found.
      summary: List programs
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: GET
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/
  /v1-mock/programs/{program_key}/:
    get:
      operationId: registrar_v1_mock_get_program
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              program_key: uexample-master-of-science
              program_title: Master of Science
              program_url: https://uexample.edx.org/uexample-master-of-science
          schema:
            $ref: '#/models/Program'
        403:
          description: User is not authorized to view program.
        404:
          description: Program was not found.
      summary: Get Program
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: GET
        requestParameters:
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/
  /v1-mock/programs/{program_key}/courses/:
    get:
      operationId: registrar_v1_mock_list_courses
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
            - course_id: course-v1:ExU+Science-101+Fall2050,
              course_title: Introduction to Science,
              course_url: https://courses.edx.org/course-v1:ExU+Science-101+Fall2050
          schema:
            items:
              $ref: '#/models/Course'
            type: array
        403:
          description: User is not authorized to list courses of program.
        404:
          description: Program was not found.
      summary: List program courses
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: GET
        requestParameters:
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/
  /v1-mock/programs/{program_key}/courses/{course_id}/enrollments/:
    get:
      description: Submit a job to retrieve course enrollment data
      operationId: registrar_v1_mock_get_course_enrollments
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      - description: edX course run identifier
        example: course-v1:ExU+Science-101+Fall2050
        in: path
        name: course_id
        required: true
        type: string
      - description: format of file to generate
        enum:
        - json
        - csv
        example: json
        in: query
        name: fmt
        required: false
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/NewJob'
        403:
          description: "User is not authorized to retrieve enrollments for program\
            \ course.\n"
        404:
          description: "Course does not exist within program, or program was not found.\n"
      summary: Request course enrollment data
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: GET
        requestParameters:
          integration.request.path.course_id: method.request.path.course_id
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/{course_id}/enrollments/
    patch:
      operationId: registrar_v1_mock_patch_course_enrollments
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      - description: edX course run identifier
        example: course-v1:ExU+Science-101+Fall2050
        in: path
        name: course_id
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/models/CourseEnrollmentRequest'
          type: array
      responses:
        200:
          description: All students' enrollments were successfully modified.
          examples:
            application/json:
              student_0128fe4a: active
              student_aae45c81: inactive
          schema:
            $ref: '#/models/CourseEnrollmentResult'
        207:
          description: "Some, but not all, students' enrollments were successfully\
            \ modified.\n"
          examples:
            application/json:
              student_0128fe4a: active
              student_aae45c81: not-found
          schema:
            $ref: '#/models/CourseEnrollmentResult'
        403:
          description: "User is not authorized to modify enrollments for program course.\n"
        404:
          description: "Course does not exist within program, or program was not found.\n"
        413:
          description: "Payload too large; at most 25 students' enrollments may be\
            \ modified per request.\n"
        422:
          description: "None of the students' enrollments were successfully modified.\n"
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: not-found
          schema:
            $ref: '#/models/CourseEnrollmentResult'
      summary: Modify course enrollments
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        requestParameters:
          integration.request.path.course_id: method.request.path.course_id
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/{course_id}/enrollments/
    post:
      operationId: registrar_v1_mock_post_course_enrollments
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      - description: edX course run identifier
        example: course-v1:ExU+Science-101+Fall2050
        in: path
        name: course_id
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/models/CourseEnrollmentRequest'
          type: array
      responses:
        200:
          description: All students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: inactive
              student_aae45c81: active
          schema:
            $ref: '#/models/CourseEnrollmentResult'
        207:
          description: Some, but not all, students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: inactive
              student_aae45c81: conflict
          schema:
            $ref: '#/models/CourseEnrollmentResult'
        403:
          description: "User is not authorized to modify enrollments for program course.\n"
        404:
          description: "Course does not exist within program, or program was not found.\n"
        413:
          description: "Payload too large; at most 25 students may be supplied per\
            \ request.\n"
        422:
          description: None of the students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: conflict
          schema:
            $ref: '#/models/CourseEnrollmentResult'
      summary: Enroll students in a course
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: POST
        requestParameters:
          integration.request.path.course_id: method.request.path.course_id
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/{course_id}/enrollments/
  /v1-mock/programs/{program_key}/enrollments/:
    get:
      description: Submit a job to retrieve program enrollment data
      operationId: registrar_v1_mock_get_program_enrollments
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      - description: format of file to generate
        enum:
        - json
        - csv
        example: json
        in: query
        name: fmt
        required: false
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/NewJob'
        403:
          description: User is not authorized to retrieve enrollment of program.
        404:
          description: Program was not found.
      summary: Request program enrollment data
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: GET
        requestParameters:
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/enrollments/
    patch:
      operationId: registrar_v1_mock_patch_program_enrollments
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/models/ProgramEnrollmentRequest'
          type: array
      responses:
        200:
          description: All students' enrollments were successfully modified.
          examples:
            application/json:
              student_0128fe4a: enrolled
              student_aae45c81: canceled
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
        207:
          description: "Some, but not all, students' enrollments were successfully\
            \ modified.\n"
          examples:
            application/json:
              student_0128fe4a: enrolled
              student_aae45c81: not-found
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
        403:
          description: "User is not authorized to modify enrollments for program course.\n"
        404:
          description: "Course does not exist within program, or program was not found.\n"
        413:
          description: "Payload too large; at most 25 students' enrollments may be\
            \ modified per request.\n"
        422:
          description: "None of the students' enrollments were successfully modified.\n"
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: not-found
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
      summary: Modify program enrollments
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        requestParameters:
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/enrollments/
    post:
      operationId: registrar_v1_mock_post_program_enrollments
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/models/ProgramEnrollmentRequest'
          type: array
      responses:
        200:
          description: All students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: pending
              student_aae45c81: enrolled
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
        207:
          description: Some, but not all, students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: pending
              student_aae45c81: conflict
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
        403:
          description: "User is not authorized to modify enrollments for program course.\n"
        404:
          description: "Course does not exist within program, or program was not found.\n"
        413:
          description: "Payload too large; at most 25 students may be supplied per\
            \ request.\n"
        422:
          description: None of the students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: conflict
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
      summary: Enroll students in a program
      tags:
      - v1 - Mock API
      x-amazon-apigateway-integration:
        httpMethod: POST
        requestParameters:
          integration.request.path.program_key: method.request.path.program_key
        type: http_proxy
        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/enrollments/
  /v1/programs/:
    get:
      description: List all programs, requires an organization key for non-admins
      operationId: registrar_v1_list_programs
      parameters:
      - description: Organization key
        in: query
        name: org
        required: false
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
            - program_key: uexample-master-of-science
              program_title: Master of Science
              program_url: https://uexample.edx.org/uexample-master-of-science
          schema:
            items:
              $ref: '#/models/Program'
            type: array
        403:
          description: User is not authorized to list specified programs.
        404:
          description: Organization was not found.
      summary: List programs
      tags:
      - v1
  /v1/programs/{program_key}/:
    get:
      operationId: registrar_v1_get_program
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              program_key: uexample-master-of-science
              program_title: Master of Science
              program_url: https://uexample.edx.org/uexample-master-of-science
          schema:
            $ref: '#/models/Program'
        403:
          description: User is not authorized to view program.
        404:
          description: Program was not found.
      summary: Get Program
      tags:
      - v1
  /v1/programs/{program_key}/courses/:
    get:
      operationId: registrar_v1_list_courses
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
            - course_id: course-v1:ExU+Science-101+Fall2050,
              course_title: Introduction to Science,
              course_url: https://courses.edx.org/course-v1:ExU+Science-101+Fall2050
          schema:
            items:
              $ref: '#/models/Course'
            type: array
        403:
          description: User is not authorized to list courses of program.
        404:
          description: Program was not found.
      summary: List program courses
      tags:
      - v1
  /v1/programs/{program_key}/enrollments/:
    post:
      operationId: registrar_v1_post_program_enrollments
      parameters:
      - description: edX program key
        example: uexample-master-of-science
        in: path
        name: program_key
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/models/ProgramEnrollmentRequest'
          type: array
      responses:
        200:
          description: All students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: pending
              student_aae45c81: enrolled
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
        207:
          description: Some, but not all, students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: pending
              student_aae45c81: conflict
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
        403:
          description: "User is not authorized to modify enrollments for program course.\n"
        404:
          description: "Course does not exist within program, or program was not found.\n"
        413:
          description: "Payload too large; at most 25 students may be supplied per\
            \ request.\n"
        422:
          description: None of the students were successfully listed.
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: conflict
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
      summary: Enroll students in a program
      tags:
      - v1
produces:
- application/json
program_enrollment_body:
  in: body
  name: body
  required: true
  schema:
    items:
      $ref: '#/models/ProgramEnrollmentRequest'
    type: array
program_input_status:
  enum:
  - enrolled
  - pending
  - suspended
  - canceled
  type: string
program_output_status:
  enum:
  - enrolled
  - pending
  - suspended
  - canceled
  - invalid-status
  - duplicated
  - conflict
  - not-found
  - illegal-operation
  - internal-error
  type: string
program_path_param:
  description: edX program key
  example: uexample-master-of-science
  in: path
  name: program_key
  required: true
  type: string
student_key:
  description: "Key that uniquely identifies student within organization. For data\
    \ privacy reasons, this cannot be, or include, sensitive personal information\
    \ like a student’s official university ID number, social security number, or some\
    \ other government-issued ID number.\n"
  type: string
swagger: '2.0'
x-amazon-apigateway-integration:
  httpMethod: GET
  type: http_proxy
x-amazon-apigateway-integration-course:
  httpMethod: GET
  requestParameters:
    integration.request.path.course_id: method.request.path.course_id
    integration.request.path.program_key: method.request.path.program_key
  type: http_proxy
x-amazon-apigateway-integration-job:
  httpMethod: GET
  requestParameters:
    integration.request.path.job_id: method.request.path.job_id
  type: http_proxy
x-amazon-apigateway-integration-program:
  httpMethod: GET
  requestParameters:
    integration.request.path.program_key: method.request.path.program_key
  type: http_proxy
