################################################################################
# Please read before updating!                                                 #
#   api.yaml -                                                                 #
#       This is the source of the api spec.  Any api-doc changes should be     #
#       made to this file      .                                               #
#   .api-generated.yaml -                                                      #
#       This is an expanded version of api.yaml since the consuming tools are  #
#       unable to parse YAML anchors. This file is generated using:            #
#         `make api_generated`                                                 #
################################################################################
swagger: '2.0'

x-amazon-apigateway-integration:
  type: aws_proxy
  httpMethod: GET

program_path_param:
  in: path
  name: program_key
  required: true
  type: string
  description: edX program key
  example: uexample-master-of-science
course_path_param:
  in: path
  name: course_id
  required: true
  type: string
  description: edX course run identifier
  example: course-v1:ExU+Science-101+Fall2050
program_enrollment_body:
  in: body
  name: body
  required: true
  schema:
    $ref: '#/models/ProgramEnrollmentRequests'
course_enrollment_body:
  in: body
  name: body
  required: true
  schema:
    $ref: '#/models/CourseEnrollmentRequests'

student_key:
  type: string
  description: >
    Key that uniquely identifies student within organization.
    For data privacy reasons, this cannot be, or include,
    sensitive personal information like a studentâ€™s official university ID
    number, social security number, or some other government-issued ID number.
  example: student_0128fe4a
program_input_status:
  type: string
  enum:
  - enrolled
  - pending
  - suspended
  - canceled
program_output_status:
  type: string
  enum:
  - enrolled
  - pending
  - suspended
  - canceled
  - invalid-status
  - duplicated
  - conflict
  - not-found
  - illegal-operation
  - internal-error
course_input_status:
  type: string
  enum:
  - active
  - inactive
course_output_status:
  type: string
  enum:
  - active
  - inactive
  - invalid-status
  - duplicated
  - conflict
  - not-in-program
  - not-found
  - illegal-operation
  - internal-error

################################################################################
#                        Base Endpoint Definitions                             #
################################################################################

endpoints:

  get_program:
    summary: Get Program
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    responses:
      200:
        description: OK
        schema:
          $ref: '#/models/Program'
      403:
        description: User is not authorized to view program.
      404:
        description: Program was not found.

  list_programs:
    summary: List programs
    description: List all programs, requires an organization key for non-admins
    parameters:
    - in: query
      name: org
      required: false
      type: string
      description: Organization key
      example: uexample
    responses:
      200:
        description: OK
        schema:
          type: array
          items:
            $ref: '#/models/Program'
      403:
        description: User is not authorized to list specified programs.
      404:
        description: Organization was not found.

  get_job_status:
    summary: Get the status of a job
    parameters:
    - in: path
      name: job_id
      required: true
      type: string
      format: uuid
      description: UUID-4 job identifier
      example: 3869c0d5-e88f-4088-bf1d-409222492869
    responses:
      200:
        description: OK
        schema:
          $ref: '#/models/JobStatus'

  list_program_courses:
    summary: List program courses
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    responses:
      200:
        description: OK
        schema:
          type: array
          items:
            $ref: '#/models/Course'
      403:
        description: User is not authorized to list courses of program.
      404:
        description: Program was not found.

  get_program_enrollments:
    summary: Request program enrollment data
    description: Submit a job to retrieve program enrollment data
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    responses:
      200:
        description: OK
        schema:
          $ref: '#/models/NewJob'
      403:
        description: User is not authorized to retrieve enrollment of program.
      404:
        description: Program was not found.

  post_program_enrollments:
    summary: Enroll students in a program
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    - in: body
      name: body
      required: true
      schema:
        $ref: '#/models/ProgramEnrollmentRequests'
    responses:
      200:
        description: All students were successfully listed.
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: pending
            student_aae45c81: enrolled
      207:
        description: Some, but not all, students were successfully listed.
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: pending
            student_aae45c81: conflict
      403:
        description: >
          User is not authorized to modify enrollments for program course.
      404:
        description: >
          Course does not exist within program, or program was not found.
      413:
        description: >
          Payload too large; at most 25 students may be supplied per request.
      422:
        description: None of the students were successfully listed.
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: conflict

  patch_program_enrollments:
    summary: Modify program enrollments
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    - in: body
      name: body
      required: true
      schema:
        $ref: '#/models/ProgramEnrollmentRequests'
    responses:
      200:
        description: All students' enrollments were successfully modified.
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: enrolled
            student_aae45c81: canceled
      207:
        description: >
          Some, but not all, students' enrollments were successfully modified.
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: enrolled
            student_aae45c81: not-found
      403:
        description: >
          User is not authorized to modify enrollments for program course.
      404:
        description: >
          Course does not exist within program, or program was not found.
      413:
        description: >
          Payload too large; at most 25 students' enrollments may be modified
          per request.
      422:
        description: >
          None of the students' enrollments were successfully modified.
        schema:
          $ref: '#/models/ProgramEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: not-found

  get_course_enrollments:
    summary: Request course enrollment data
    description: Submit a job to retrieve course enrollment data
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    - in: path
      name: course_id
      required: true
      type: string
      description: edX course run identifier
      example: course-v1:ExU+Science-101+Fall2050
    responses:
      200:
        description: OK
        schema:
          $ref: '#/models/NewJob'
      403:
        description: >
          User is not authorized to retrieve enrollments for program course.
      404:
        description: >
          Course does not exist within program, or program was not found.

  post_course_enrollments:
    summary: Enroll students in a course
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    - in: path
      name: course_id
      required: true
      type: string
      description: edX course run identifier
      example: course-v1:ExU+Science-101+Fall2050
    - in: body
      name: body
      required: true
      schema:
        $ref: '#/models/CourseEnrollmentRequests'
    responses:
      200:
        description: All students were successfully listed.
        schema:
          $ref: '#/models/CourseEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: inactive
            student_aae45c81: active
      207:
        description: Some, but not all, students were successfully listed.
        schema:
          $ref: '#/models/CourseEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: inactive
            student_aae45c81: conflict
      403:
        description: >
          User is not authorized to modify enrollments for program course.
      404:
        description: >
          Course does not exist within program, or program was not found.
      413:
        description: >
          Payload too large; at most 25 students may be supplied per request.
      422:
        description: None of the students were successfully listed.
        schema:
          $ref: '#/models/CourseEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: conflict

  patch_course_enrollments:
    summary: Modify course enrollments
    parameters:
    - in: path
      name: program_key
      required: true
      type: string
      description: edX program key
      example: uexample-master-of-science
    - in: path
      name: course_id
      required: true
      type: string
      description: edX course run identifier
      example: course-v1:ExU+Science-101+Fall2050
    - in: body
      name: body
      required: true
      schema:
        $ref: '#/models/CourseEnrollmentRequests'
    responses:
      200:
        description: All students' enrollments were successfully modified.
        schema:
          $ref: '#/models/CourseEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: active
            student_aae45c81: inactive
      207:
        description: >
          Some, but not all, students' enrollments were successfully modified.
        schema:
          $ref: '#/models/CourseEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: active
            student_aae45c81: not-found
      403:
        description: >
          User is not authorized to modify enrollments for program course.
      404:
        description: >
          Course does not exist within program, or program was not found.
      413:
        description: >
          Payload too large; at most 25 students' enrollments may be modified
          per request.
      422:
        description: >
          None of the students' enrollments were successfully modified.
        schema:
          $ref: '#/models/CourseEnrollmentResult'
        examples:
          application/json:
            student_0128fe4a: invalid-status
            student_aae45c81: not-found


################################################################################
#                              API Information                                 #
################################################################################
info:
  title: Registrar API
  description: |
    Registrar API

basePath: /api
produces:
- application/json
consumes:
- application/json


################################################################################
#                             Path Config                                      #
################################################################################

paths:

  ### V1 Mock API ###
  /v1-mock/jobs/{job_id}/:
    get:
      summary: Get the status of a job
      parameters:
      - in: path
        name: job_id
        required: true
        type: string
        format: uuid
        description: UUID-4 job identifier
        example: 3869c0d5-e88f-4088-bf1d-409222492869
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/JobStatus'
      operationId: registrar_v1_mock_get_job_status
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/jobs/{job_id}/
  /v1-mock/programs/:
    get:
      summary: List programs
      description: List all programs, requires an organization key for non-admins
      parameters:
      - in: query
        name: org
        required: false
        type: string
        description: Organization key
        example: uexample
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/models/Program'
        403:
          description: User is not authorized to list specified programs.
        404:
          description: Organization was not found.

      operationId: registrar_v1_mock_list_programs
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/
  /v1-mock/programs/{program_key}/:
    get:
      summary: Get Program
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/Program'
        403:
          description: User is not authorized to view program.
        404:
          description: Program was not found.

      operationId: registrar_v1_mock_get_program
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/
  /v1-mock/programs/{program_key}/courses/:
    get:
      summary: List program courses
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/models/Course'
        403:
          description: User is not authorized to list courses of program.
        404:
          description: Program was not found.

      operationId: registrar_v1_mock_list_courses
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/
  /v1-mock/programs/{program_key}/courses/{course_id}/enrollments/:
    get:
      summary: Request course enrollment data
      description: Submit a job to retrieve course enrollment data
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      - in: path
        name: course_id
        required: true
        type: string
        description: edX course run identifier
        example: course-v1:ExU+Science-101+Fall2050
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/NewJob'
        403:
          description: >
            User is not authorized to retrieve enrollments for program course.
        404:
          description: >
            Course does not exist within program, or program was not found.

      operationId: registrar_v1_mock_get_course_enrollments
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/{course_id}/enrollments/
    post:
      summary: Enroll students in a course
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      - in: path
        name: course_id
        required: true
        type: string
        description: edX course run identifier
        example: course-v1:ExU+Science-101+Fall2050
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/models/CourseEnrollmentRequests'
      responses:
        200:
          description: All students were successfully listed.
          schema:
            $ref: '#/models/CourseEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: inactive
              student_aae45c81: active
        207:
          description: Some, but not all, students were successfully listed.
          schema:
            $ref: '#/models/CourseEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: inactive
              student_aae45c81: conflict
        403:
          description: >
            User is not authorized to modify enrollments for program course.
        404:
          description: >
            Course does not exist within program, or program was not found.
        413:
          description: >
            Payload too large; at most 25 students may be supplied per request.
        422:
          description: None of the students were successfully listed.
          schema:
            $ref: '#/models/CourseEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: conflict

      operationId: registrar_v1_mock_post_course_enrollments
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/{course_id}/enrollments/
    patch:
      summary: Modify course enrollments
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      - in: path
        name: course_id
        required: true
        type: string
        description: edX course run identifier
        example: course-v1:ExU+Science-101+Fall2050
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/models/CourseEnrollmentRequests'
      responses:
        200:
          description: All students' enrollments were successfully modified.
          schema:
            $ref: '#/models/CourseEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: active
              student_aae45c81: inactive
        207:
          description: >
            Some, but not all, students' enrollments were successfully modified.
          schema:
            $ref: '#/models/CourseEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: active
              student_aae45c81: not-found
        403:
          description: >
            User is not authorized to modify enrollments for program course.
        404:
          description: >
            Course does not exist within program, or program was not found.
        413:
          description: >
            Payload too large; at most 25 students' enrollments may be modified
            per request.
        422:
          description: >
            None of the students' enrollments were successfully modified.
          schema:
            $ref: '#/models/CourseEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: not-found


      operationId: registrar_v1_mock_patch_course_enrollments
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/courses/{course_id}/enrollments/
  /v1-mock/programs/{program_key}/enrollments/:
    get:
      summary: Request program enrollment data
      description: Submit a job to retrieve program enrollment data
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/NewJob'
        403:
          description: User is not authorized to retrieve enrollment of program.
        404:
          description: Program was not found.

      operationId: registrar_v1_mock_get_program_enrollments
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/enrollments/
    post:
      summary: Enroll students in a program
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/models/ProgramEnrollmentRequests'
      responses:
        200:
          description: All students were successfully listed.
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: pending
              student_aae45c81: enrolled
        207:
          description: Some, but not all, students were successfully listed.
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: pending
              student_aae45c81: conflict
        403:
          description: >
            User is not authorized to modify enrollments for program course.
        404:
          description: >
            Course does not exist within program, or program was not found.
        413:
          description: >
            Payload too large; at most 25 students may be supplied per request.
        422:
          description: None of the students were successfully listed.
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: conflict

      operationId: registrar_v1_mock_post_program_enrollments
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/enrollments/
    patch:
      summary: Modify program enrollments
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/models/ProgramEnrollmentRequests'
      responses:
        200:
          description: All students' enrollments were successfully modified.
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: enrolled
              student_aae45c81: canceled
        207:
          description: >
            Some, but not all, students' enrollments were successfully modified.
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: enrolled
              student_aae45c81: not-found
        403:
          description: >
            User is not authorized to modify enrollments for program course.
        404:
          description: >
            Course does not exist within program, or program was not found.
        413:
          description: >
            Payload too large; at most 25 students' enrollments may be modified
            per request.
        422:
          description: >
            None of the students' enrollments were successfully modified.
          schema:
            $ref: '#/models/ProgramEnrollmentResult'
          examples:
            application/json:
              student_0128fe4a: invalid-status
              student_aae45c81: not-found

      operationId: registrar_v1_mock_patch_program_enrollments
      tags: [v1 - Mock API]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: GET

        uri: https://${stageVariables.registrar_host}/api/v1-mock/programs/{program_key}/enrollments/


  ### V1 API ###
  /v1/programs/:
    get:
      summary: List programs
      description: List all programs, requires an organization key for non-admins
      parameters:
      - in: query
        name: org
        required: false
        type: string
        description: Organization key
        example: uexample
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/models/Program'
        403:
          description: User is not authorized to list specified programs.
        404:
          description: Organization was not found.

      operationId: registrar_v1_list_programs
      tags: [v1]
  /v1/programs/{program_key}/:
    get:
      summary: Get Program
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      responses:
        200:
          description: OK
          schema:
            $ref: '#/models/Program'
        403:
          description: User is not authorized to view program.
        404:
          description: Program was not found.

      operationId: registrar_v1_get_program
      tags: [v1]
  /v1/programs/{program_key}/courses/:
    get:
      summary: List program courses
      parameters:
      - in: path
        name: program_key
        required: true
        type: string
        description: edX program key
        example: uexample-master-of-science
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/models/Course'
        403:
          description: User is not authorized to list courses of program.
        404:
          description: Program was not found.

      operationId: registrar_v1_list_courses
      tags: [v1]


################################################################################
#     Data Models                                                              #
################################################################################
models:
  Program:
    type: object
    properties:
      program_key:
        type: string
        example: uexample-master-of-science
      program_title:
        type: string
        example: Master of Science
      program_url:
        type: string
        format: uri
        example: https://uexample.edx.org/uexample-master-of-science
  Course:
    type: object
    properties:
      course_id:
        type: string
        example: course-v1:ExU+Science-101+Fall2050
      course_title:
        type: string
        example: Introduction to Science
      course_url:
        type: string
        format: uri
        example: https://courses.edx.org/course-v1:ExU+Science-101+Fall2050
  ProgramEnrollmentRequests:
    type: array
    items:
      type: object
      properties:
        student_key:
          type: string
          description: >
            Key that uniquely identifies student within organization.
            For data privacy reasons, this cannot be, or include,
            sensitive personal information like a studentâ€™s official university ID
            number, social security number, or some other government-issued ID number.
          example: student_0128fe4a
        status:
          type: string
          enum:
          - enrolled
          - pending
          - suspended
          - canceled
    example:
    - student_key: student_0128fe4a
      status: pending
    - student_key: student_aae45c81
      status: enrolled
  CourseEnrollmentRequests:
    type: array
    items:
      type: object
      properties:
        student_key:
          type: string
          description: >
            Key that uniquely identifies student within organization.
            For data privacy reasons, this cannot be, or include,
            sensitive personal information like a studentâ€™s official university ID
            number, social security number, or some other government-issued ID number.
          example: student_0128fe4a
        status:
          type: string
          enum:
          - active
          - inactive
    example:
    - student_key: student_0128fe4a
      status: inactive
    - student_key: student_aae45c81
      status: active
  ProgramEnrollmentResult:
    type: object
    additionalProperties:
      type: string
      enum:
      - enrolled
      - pending
      - suspended
      - canceled
      - invalid-status
      - duplicated
      - conflict
      - not-found
      - illegal-operation
      - internal-error
    description: Mapping from student_keys to program enrollment statuses
  CourseEnrollmentResult:
    type: object
    additionalProperties:
      type: string
      enum:
      - active
      - inactive
      - invalid-status
      - duplicated
      - conflict
      - not-in-program
      - not-found
      - illegal-operation
      - internal-error

################################################################################
#                        Base Endpoint Definitions                             #
################################################################################

    description: Mapping from student_keys to course enrollment statuses
  NewJob:
    type: object
    properties:
      job_id:
        type: string
        format: uuid
        description: UUID-4 job identifier
        example: 3869c0d5-e88f-4088-bf1d-409222492869
      job_url:
        type: string
        format: uri
        description: URL to get status of job
        example: https://.../api/v1/jobs/3869c0d5-e88f-4088-bf1d-409222492869
  JobStatus:
    type: object
    properties:
      created:
        type: string
        format: date-time
        description: The ISO-format date-time that the job was created
      state:
        type: string
        enum: [Queued, In Progress, Canceled, Failed, Succeeded]
        example: In Progress
      result:
        type: string
        format: uri
        nullable: true
        description: URL to result file; null if result unavailable
        example: https://.../files/result.json
